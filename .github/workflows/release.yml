name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type (patch, minor, major)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: '10.11.1'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.17.0'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Run tests
        run: |
          pnpm test
          pnpm type-check
          pnpm lint

      - name: Build application
        run: pnpm build

      - name: Determine version bump
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "bump=${{ github.event.inputs.release_type }}" >> $GITHUB_OUTPUT
          else
            # Analyze commit messages to determine version bump
            if git log --format=%B -n 1 | grep -q "BREAKING CHANGE"; then
              echo "bump=major" >> $GITHUB_OUTPUT
            elif git log --format=%B -n 1 | grep -q "^feat"; then
              echo "bump=minor" >> $GITHUB_OUTPUT
            else
              echo "bump=patch" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Create release
        run: |
          # Use standard-version for changelog generation
          pnpm release -- --release-as ${{ steps.version.outputs.bump }} --skip.tag

      - name: Push changes
        run: |
          git push --follow-tags origin main

      - name: Get version
        id: package_version
        run: |
          echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ steps.package_version.outputs.version }}
          name: Release v${{ steps.package_version.outputs.version }}
          body: |
            ## ðŸš€ Release v${{ steps.package_version.outputs.version }}

            ### What's Changed
            See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for detailed changes.

            ### Installation
            ```bash
            git clone https://github.com/${{ github.repository }}.git
            cd ai-portfolio-builder
            git checkout v${{ steps.package_version.outputs.version }}
            pnpm install
            ```

            ### Docker
            ```bash
            docker pull ghcr.io/${{ github.repository }}:${{ steps.package_version.outputs.version }}
            ```

            ---
            Full Changelog: https://github.com/${{ github.repository }}/compare/v${{ steps.package_version.outputs.previous_version }}...v${{ steps.package_version.outputs.version }}
          draft: false
          prerelease: false
          generateReleaseNotes: true

      - name: Update deployment
        run: |
          echo "::notice::Ready to deploy version ${{ steps.package_version.outputs.version }} to production"
          # Add deployment steps here when ready
