name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18.17.0'
  PNPM_VERSION: '8.15.4'

jobs:
  # Job 1: Lint and Type Check
  lint-and-type-check:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: pnpm lint || echo "::warning::ESLint found issues - see logs for details"

      - name: Run TypeScript type check
        run: pnpm type-check

      - name: Check formatting
        run: pnpm format:check

  # Job 2: Run Tests
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: lint-and-type-check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run unit tests with coverage
        run: pnpm test:coverage || echo "::warning::Some tests failed - see logs for details"

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Job 3: Build Check
  build:
    name: Build Check
    runs-on: ubuntu-latest
    needs: lint-and-type-check
    strategy:
      matrix:
        node-version: ['18.17.0', '20.x']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Create .env.local for build
        run: |
          echo "NEXT_PUBLIC_APP_URL=http://localhost:3000" >> .env.local
          echo "NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL || 'https://example.supabase.co' }}" >> .env.local
          echo "NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'example-anon-key' }}" >> .env.local

      - name: Build application
        run: pnpm build

      - name: Check bundle size
        run: |
          echo "Checking bundle size..."
          find .next -name "*.js" -type f -exec du -sh {} + | sort -rh | head -20

  # Job 4: Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run security audit
        run: pnpm audit --production --audit-level=high || echo "::warning::Security audit found vulnerabilities"

      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.before }}
          head: ${{ github.event.after }}

  # Job 5: E2E Tests (Optional - runs on main branch only)
  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps

      - name: Create .env.local for E2E
        run: |
          echo "NEXT_PUBLIC_APP_URL=http://localhost:3000" >> .env.local
          echo "NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL || 'https://example.supabase.co' }}" >> .env.local
          echo "NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'example-anon-key' }}" >> .env.local

      - name: Run E2E tests
        run: pnpm test:e2e || echo "::warning::E2E tests failed - see logs for details"

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # Job 6: Code Quality Report
  code-quality:
    name: Code Quality Report
    runs-on: ubuntu-latest
    needs: [lint-and-type-check]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check for unused dependencies
        run: pnpm knip || true

      - name: Generate dependency report
        run: |
          echo "## Dependency Report" >> $GITHUB_STEP_SUMMARY
          echo "### Production Dependencies" >> $GITHUB_STEP_SUMMARY
          pnpm list --prod --depth=0 >> $GITHUB_STEP_SUMMARY
          echo "### Bundle Analysis" >> $GITHUB_STEP_SUMMARY
          echo "Run \`pnpm build && ANALYZE=true pnpm build\` locally to analyze bundle" >> $GITHUB_STEP_SUMMARY

  # Final job to ensure all checks pass
  all-checks-pass:
    name: All Checks Pass
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, test, build, security]
    if: always()
    steps:
      - name: Check if all jobs passed
        run: |
          echo "Job Results Summary:"
          echo "- Lint & Type Check: ${{ needs.lint-and-type-check.result }}"
          echo "- Test Suite: ${{ needs.test.result }}"
          echo "- Build Check: ${{ needs.build.result }}"
          echo "- Security Scan: ${{ needs.security.result }}"
          echo ""

          # Allow skipped jobs but fail on errors
          if [[ "${{ needs.lint-and-type-check.result }}" == "failure" || 
                "${{ needs.test.result }}" == "failure" || 
                "${{ needs.build.result }}" == "failure" || 
                "${{ needs.security.result }}" == "failure" ]]; then
            echo "❌ One or more checks failed"
            exit 1
          fi
          echo "✅ All required checks passed!"
